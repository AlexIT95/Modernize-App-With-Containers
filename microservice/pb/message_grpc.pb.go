// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MyMessageServiceClient is the client API for MyMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyMessageServiceClient interface {
	ListMessages(ctx context.Context, in *ListMyMessagesRequest, opts ...grpc.CallOption) (*ListMyMessagesResponse, error)
	AddMessage(ctx context.Context, in *AddMyMessageRequest, opts ...grpc.CallOption) (*AddMyMessageResponse, error)
	UpdateMessage(ctx context.Context, in *UpdateMyMessageRequest, opts ...grpc.CallOption) (*UpdateMyMessageResponse, error)
}

type myMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMyMessageServiceClient(cc grpc.ClientConnInterface) MyMessageServiceClient {
	return &myMessageServiceClient{cc}
}

func (c *myMessageServiceClient) ListMessages(ctx context.Context, in *ListMyMessagesRequest, opts ...grpc.CallOption) (*ListMyMessagesResponse, error) {
	out := new(ListMyMessagesResponse)
	err := c.cc.Invoke(ctx, "/messageprotos.MyMessageService/ListMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myMessageServiceClient) AddMessage(ctx context.Context, in *AddMyMessageRequest, opts ...grpc.CallOption) (*AddMyMessageResponse, error) {
	out := new(AddMyMessageResponse)
	err := c.cc.Invoke(ctx, "/messageprotos.MyMessageService/AddMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myMessageServiceClient) UpdateMessage(ctx context.Context, in *UpdateMyMessageRequest, opts ...grpc.CallOption) (*UpdateMyMessageResponse, error) {
	out := new(UpdateMyMessageResponse)
	err := c.cc.Invoke(ctx, "/messageprotos.MyMessageService/UpdateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyMessageServiceServer is the server API for MyMessageService service.
// All implementations must embed UnimplementedMyMessageServiceServer
// for forward compatibility
type MyMessageServiceServer interface {
	ListMessages(context.Context, *ListMyMessagesRequest) (*ListMyMessagesResponse, error)
	AddMessage(context.Context, *AddMyMessageRequest) (*AddMyMessageResponse, error)
	UpdateMessage(context.Context, *UpdateMyMessageRequest) (*UpdateMyMessageResponse, error)
	mustEmbedUnimplementedMyMessageServiceServer()
}

// UnimplementedMyMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMyMessageServiceServer struct {
}

func (UnimplementedMyMessageServiceServer) ListMessages(context.Context, *ListMyMessagesRequest) (*ListMyMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedMyMessageServiceServer) AddMessage(context.Context, *AddMyMessageRequest) (*AddMyMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMessage not implemented")
}
func (UnimplementedMyMessageServiceServer) UpdateMessage(context.Context, *UpdateMyMessageRequest) (*UpdateMyMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessage not implemented")
}
func (UnimplementedMyMessageServiceServer) mustEmbedUnimplementedMyMessageServiceServer() {}

// UnsafeMyMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyMessageServiceServer will
// result in compilation errors.
type UnsafeMyMessageServiceServer interface {
	mustEmbedUnimplementedMyMessageServiceServer()
}

func RegisterMyMessageServiceServer(s grpc.ServiceRegistrar, srv MyMessageServiceServer) {
	s.RegisterService(&MyMessageService_ServiceDesc, srv)
}

func _MyMessageService_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyMessageServiceServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageprotos.MyMessageService/ListMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyMessageServiceServer).ListMessages(ctx, req.(*ListMyMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyMessageService_AddMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMyMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyMessageServiceServer).AddMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageprotos.MyMessageService/AddMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyMessageServiceServer).AddMessage(ctx, req.(*AddMyMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyMessageService_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMyMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyMessageServiceServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageprotos.MyMessageService/UpdateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyMessageServiceServer).UpdateMessage(ctx, req.(*UpdateMyMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MyMessageService_ServiceDesc is the grpc.ServiceDesc for MyMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messageprotos.MyMessageService",
	HandlerType: (*MyMessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMessages",
			Handler:    _MyMessageService_ListMessages_Handler,
		},
		{
			MethodName: "AddMessage",
			Handler:    _MyMessageService_AddMessage_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _MyMessageService_UpdateMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
